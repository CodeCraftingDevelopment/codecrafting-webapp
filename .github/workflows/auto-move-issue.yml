name: Move issue to correct status on commit

on:
  push:
    branches:
      - '**'

permissions:
  contents: write
  packages: write

jobs:

  search-project:
    name: Recherche du projet
    runs-on: ubuntu-latest
    outputs:
      project: ${{ steps.set-outputs.outputs.project }}
    steps:

      - uses: actions/checkout@v3

      - name: Find project from commit
        id: extract_project
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Récupérer le premier projet V2
          PROJECT_JSON=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/projects?state=open&per_page=1")
          
          # Vérifier si des projets existent
          if [ "$(echo "$PROJECT_JSON" | jq '. | length')" -eq 0 ]; then
          echo "Aucun projet V2 trouvé pour ce dépôt"
          exit 1
          fi
          
          # Extraire les informations du projet
          PROJECT_ID=$(echo "$PROJECT_JSON" | jq -r '.[0].id')
          PROJECT_NAME=$(echo "$PROJECT_JSON" | jq -r '.[0].name')
          
          echo "ID du projet: $PROJECT_ID"
          echo "Nom du projet: $PROJECT_NAME"
          
          # Sauvegarder pour les étapes suivantes
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT


  check-commit:
    name: Vérification des commits
    runs-on: ubuntu-latest
    outputs:
      ref_issues: ${{ steps.set-outputs.outputs.ref_issues }}
      closed_issues: ${{ steps.set-outputs.outputs.closed_issues }}
    steps:
      - uses: actions/checkout@v3

      - name: Extract issue references
        id: extract_refs
        run: |
          # Récupérer le message du commit
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          
          # Extraire les références d'issues (format: refs #123)
          REF_ISSUES=$(echo "$COMMIT_MSG" | grep -oP 'refs\s*#\K\d+' | tr '\n' ' ')
          
          # Extraire les fermetures d'issues (format: closes #123, fixed #456)
          CLOSED_ISSUES=$(echo "$COMMIT_MSG" | grep -oP '(?:closes|closed|fixes|fixed)\s*#\K\d+' | tr '\n' ' ')
          
          # Fusionner et trier les numéros uniques
          ALL_ISSUES=$(echo -e "$REF_ISSUES\n$CLOSED_ISSUES" | sort -n | uniq | tr '\n' ' ')
          
          # Afficher les résultats
          echo "Issues référencées: $REF_ISSUES"
          echo "Issues fermées: $CLOSED_ISSUES"
          echo "Toutes les issues uniques: $ALL_ISSUES"
          
          # Définir les sorties
          echo "ref_issues=$REF_ISSUES" >> $GITHUB_OUTPUT
          echo "closed_issues=$CLOSED_ISSUES" >> $GITHUB_OUTPUT
          echo "all_issues=$ALL_ISSUES" >> $GITHUB_OUTPUT
          

        
