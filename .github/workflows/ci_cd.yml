name: CI/CD

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Compilation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Installation des dépendances
        run: npm ci

      - name: Compilation des sources
        run: npm run build

  versioning:
    name: Numéro de version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-outputs.outputs.version }}
      commit_hash: ${{ steps.set-outputs.outputs.commit_hash }}
      unstable_version: ${{ steps.set-outputs.outputs.unstable_version }}
    steps:
      - uses: actions/checkout@v3
      - name: Génération du numéro de version
        id: set-outputs
        run: |
          # Récupérer la version depuis package.json
          VERSION=$(node -p "require('./package.json').version")
          
          # Hash court du commit (7 premiers caractères)
          COMMIT_HASH="${GITHUB_SHA:0:7}"
          
          # Version unstable
          UNSTABLE_VERSION="${VERSION}-unstable.${COMMIT_HASH}"
          
          # Afficher les infos
          echo "Version: $VERSION"
          echo "Hash: $COMMIT_HASH"
          echo "Version unstable: $UNSTABLE_VERSION"
          
          # Exporter pour les étapes suivantes
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "unstable_version=$UNSTABLE_VERSION" >> $GITHUB_OUTPUT

  docker-image:
    name: Image Docker
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=staging,enable=${{ github.ref == 'refs/heads/develop' }}
            type=raw,value=production,enable=${{ github.ref == 'refs/heads/master' }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


  generate-version-staging:
    name: Version de pré-production
    needs: [docker-image, versioning]
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Afficher les informations de version
        run: |
          echo "Version unstable: ${{ needs.versioning.outputs.unstable_version }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ needs.versioning.outputs.commit_hash }}"
          
      - name: Supprimer les versions de pré-productions
        run: |
          gh api -X GET "repos/${{ github.repository }}/releases" \
          --jq '.[] | select(.prerelease == true) | "\(.tag_name) \(.id)"' | \
          while read -r tag id; do
          # Supprimer la release
          gh api -X DELETE "repos/${{ github.repository }}/releases/$id"
          # Supprimer le tag associé
          gh api -X DELETE "repos/${{ github.repository }}/git/refs/tags/$tag" || true
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Créer la version pré-production
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.versioning.outputs.unstable_version }}
          release_name: "Unstable ${{ needs.versioning.outputs.unstable_version }}"
          body: |            
            - Version: ${{ needs.versioning.outputs.unstable_version }}
            - Commit: ${{ needs.versioning.outputs.commit_hash }}
            - Branche: ${{ github.ref_name }}
            - SHA: ${{ github.sha }}
            - Date: $(date)
          draft: false
          prerelease: true


  generate-version-production:
    name: Version de production
    needs: [docker-image, versioning]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Afficher les informations de version
        run: |
          echo "Version release: ${{ needs.versioning.outputs.version }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ needs.versioning.outputs.commit_hash }}"

      - name: Supprimer l'ancienne release et son tag si existants
        run: |
          VERSION="${{ needs.versioning.outputs.version }}"
          REPO="${{ github.repository }}"
          
          # Vérifier si une release existe déjà pour cette version
          response=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/$REPO/releases/tags/$VERSION")
          
          release_id=$(echo "$response" | jq -r '.id // empty')
          
          if [ -n "$release_id" ]; then
            echo "Suppression de la release existante pour la version $VERSION (ID: $release_id)"
            
            # 1. Supprimer la release
            echo "Suppression de la release..."
            curl -s -X DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/$REPO/releases/$release_id"
            
            # 2. Supprimer le tag associé
            echo "Suppression du tag $VERSION..."
            curl -s -X DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/$REPO/git/refs/tags/$VERSION" || echo "Impossible de supprimer le tag, peut-être déjà supprimé"
            
            # 3. Supprimer également la référence du tag s'il existe encore
            echo "Vérification de la référence du tag..."
            curl -s -X DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/$REPO/git/refs/tags/$VERSION" || true
            
            echo "✅ Release et tag $VERSION supprimés avec succès"
          else
            echo "ℹ️ Aucune release existante à supprimer pour la version $VERSION"
            
            # Vérifier si le tag existe quand même (au cas où il n'est pas associé à une release)
            tag_response=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/$REPO/git/ref/tags/$VERSION")
              
            if [ "$tag_response" = "200" ]; then
              echo "ℹ️ Tag $VERSION trouvé sans release associée, suppression..."
              curl -s -X DELETE \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/repos/$REPO/git/refs/tags/$VERSION"
              echo "✅ Tag $VERSION supprimé avec succès"
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Créer la version release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.versioning.outputs.version }}
          release_name: "Release ${{ needs.versioning.outputs.version }}"
          body: |
            - Version: ${{ needs.versioning.outputs.version }}
            - Commit: ${{ needs.versioning.outputs.commit_hash }}
            - Branche: ${{ github.ref_name }}
            - SHA: ${{ github.sha }}
            - Date: $(date)
          draft: false
          prerelease: false

#  clean-old-docker-images:
#    name: Nettoyage
#    needs: [generate-version-staging, generate-version-production]
#    if: always() && (needs.generate-version-staging.result == 'success' || needs.generate-version-staging.result == 'skipped') && (needs.generate-version-production.result == 'success' || needs.generate-version-production.result == 'skipped')
#    runs-on: ubuntu-latest
#    steps:
#      - name: Suppression des anciennes images docker
#        run: |
#          # Récupérer le nom du package
#          PACKAGE_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
#
#          # Récupérer toutes les versions
#          response=$(curl -s \
#          -H "Accept: application/vnd.github+json" \
#          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
#          -H "X-GitHub-Api-Version: 2022-11-28" \
#          "https://api.github.com/user/packages/container/$PACKAGE_NAME/versions")
#
#          # Supprimer les versions sans tags
#          echo "$response" | jq -r '.[] | select(.metadata.container.tags | length == 0) | .id' | \
#          while read -r id; do
#          echo "Suppression de l'image sans tag (ID: $id)"
#          curl -s -X DELETE \
#          -H "Accept: application/vnd.github+json" \
#          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
#          -H "X-GitHub-Api-Version: 2022-11-28" \
#          "https://api.github.com/user/packages/container/$PACKAGE_NAME/versions/$id" || true
#          done
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}