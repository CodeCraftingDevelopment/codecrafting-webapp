name: CI/CD

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=staging,enable=${{ github.ref == 'refs/heads/develop' }}
            type=raw,value=production,enable=${{ github.ref == 'refs/heads/master' }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/master'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0
          release_name: Release v1.0.0
          body: |
            Nouvelle version de production.
          draft: false
          prerelease: false

  clean:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up GitHub CLI
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Clean up old images
        run: |
          # Afficher les informations de débogage
          echo "Repository: ${{ github.repository }}"
          echo "Repository Owner: ${{ github.repository_owner }}"
          echo "Repository Name: ${{ github.event.repository.name }}"
          
          # Définir l'environnement en fonction de la branche
          if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            ENV=staging
          else
            ENV=production
          fi
          echo "Environment: $ENV"
          
          # Obtenir la liste des images existantes
          IMAGES=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/users/${{ github.repository_owner }}/packages/container/${{ github.event.repository.name }}/versions" \
            --jq ".[] | select(any(.metadata.container.tags[]; . == \"$ENV\")) | .id" | sort -r | tail -n +2)
          
          # Afficher le nombre d'images trouvées
          echo "Found $(echo "$IMAGES" | wc -l) images to clean up"
          
          # Supprimer les anciennes images
          for id in $IMAGES; do
            echo "Deleting image ID: $id"
            gh api --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/users/${{ github.repository_owner }}/packages/container/${{ github.event.repository.name }}/versions/$id" || true
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}