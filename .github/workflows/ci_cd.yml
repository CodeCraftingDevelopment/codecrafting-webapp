name: CI/CD

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Compilation du projet
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Installation des dépendances
        run: npm ci

      - name: Compilation des sources
        run: npm run build

  versioning:
    name: Génération du numéro de version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-outputs.outputs.version }}
      commit_hash: ${{ steps.set-outputs.outputs.commit_hash }}
      unstable_version: ${{ steps.set-outputs.outputs.unstable_version }}
    steps:
      - uses: actions/checkout@v3
      - name: Génération du numéro de version
        id: set-outputs
        run: |
          # Récupérer la version depuis package.json
          VERSION=$(node -p "require('./package.json').version")
          
          # Hash court du commit (7 premiers caractères)
          COMMIT_HASH="${GITHUB_SHA:0:7}"
          
          # Version unstable
          UNSTABLE_VERSION="${VERSION}-unstable.${COMMIT_HASH}"
          
          # Afficher les infos
          echo "Version: $VERSION"
          echo "Hash: $COMMIT_HASH"
          echo "Version unstable: $UNSTABLE_VERSION"
          
          # Exporter pour les étapes suivantes
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "unstable_version=$UNSTABLE_VERSION" >> $GITHUB_OUTPUT

  docker-image:
    name: Génération de l'image Docker
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=staging,enable=${{ github.ref == 'refs/heads/develop' }}
            type=raw,value=production,enable=${{ github.ref == 'refs/heads/master' }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


  generate-version-staging:
    name: Création de la version de Pré-production
    needs: [docker-image, versioning]
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Afficher les informations de version
        run: |
          echo "Version unstable: ${{ needs.versioning.outputs.unstable_version }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ needs.versioning.outputs.commit_hash }}"
          
      - name: Supprimer les versions de pré-productions
        run: |
          # Lister et supprimer toutes les pré-releases
          gh api -X GET "repos/${{ github.repository }}/releases" \
            --jq '.[] | select(.prerelease == true) | .id' | \
            xargs -I{} gh api -X DELETE "repos/${{ github.repository }}/releases/{}"
          
          # Supprimer les tags associés
          gh api -X GET "repos/${{ github.repository }}/releases" \
            --jq '.[] | select(.prerelease == true) | .tag_name' | \
            xargs -I{} gh api -X DELETE "repos/${{ github.repository }}/git/refs/tags/{}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Créer la version pré-production
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.versioning.outputs.unstable_version }}
          release_name: "Unstable ${{ needs.versioning.outputs.unstable_version }}"
          body: |            
            - Version: ${{ needs.versioning.outputs.unstable_version }}
            - Commit: ${{ needs.versioning.outputs.commit_hash }}
            - Branche: ${{ github.ref_name }}
            - SHA: ${{ github.sha }}
            - Date: $(date)
          draft: false
          prerelease: true


  generate-version-production:
    name: Création de la version de production
    needs: [docker-image, versioning]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Afficher les informations de version
        run: |
          echo "Version release: ${{ needs.versioning.outputs.version }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ needs.versioning.outputs.commit_hash }}"

      - name: Supprimer l'ancienne release de la même version si existante
        run: |
          # Vérifier si une version unstable existe déjà
          if gh release view "${{ needs.versioning.outputs.version }}" &>/dev/null; then
            echo "Suppression de la version unstable existante..."
            gh release delete "${{ needs.versioning.outputs.version }}" --yes || true
            git tag -d "${{ needs.versioning.outputs.version }}" || true
            git push origin ":${{ needs.versioning.outputs.version }}" || true
          else
            echo "Aucune version release de la même version existante à supprimer"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Créer la version release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.versioning.outputs.version }}
          release_name: "Release ${{ needs.versioning.outputs.version }}"
          body: |
            - Version: ${{ needs.versioning.outputs.version }}
            - Commit: ${{ needs.versioning.outputs.commit_hash }}
            - Branche: ${{ github.ref_name }}
            - SHA: ${{ github.sha }}
            - Date: $(date)
          draft: false
          prerelease: false

  clean-old-docker-images:
    name: Suppression des anciennes images docker
    needs: [generate-version-staging, generate-version-production]
    if: always() && (needs.generate-version-staging.result == 'success' || needs.generate-version-staging.result == 'skipped') && (needs.generate-version-production.result == 'success' || needs.generate-version-production.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Supprimer les anciennes images docker
        run: |
          # Récupérer le nom du package
          PACKAGE_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          
          # Récupérer toutes les versions
          response=$(curl -s \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/user/packages/container/$PACKAGE_NAME/versions")
          
          # Supprimer les versions sans tags
          echo "$response" | jq -r '.[] | select(.metadata.container.tags | length == 0) | .id' | \
          while read -r id; do
          echo "Suppression de l'image sans tag (ID: $id)"
          curl -s -X DELETE \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/user/packages/container/$PACKAGE_NAME/versions/$id" || true
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - name: Delete existing release if it exists
#        if: github.ref == 'refs/heads/master'
#        run: |
#
#          if ! command -v gh &> /dev/null; then
#            echo "Installing GitHub CLI..."
#            type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
#            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
#            && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
#            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
#            && sudo apt update \
#            && sudo apt install gh -y
#          fi
#
#          # Vérifier si la release existe
#          if gh release view v1.0.0 --json url &>/dev/null; then
#            echo "Deleting existing release v1.0.0..."
#            gh release delete v1.0.0 -y || true
#            git tag -d v1.0.0 || true
#            git push origin :refs/tags/v1.0.0 || true
#          fi
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Create GitHub Release
#        if: github.ref == 'refs/heads/master'
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: v1.0.0
#          release_name: Release v1.0.0
#          body: |
#            Nouvelle version de production.
#            - SHA: ${{ github.sha }}
#            - Date: $(date)
#          draft: false
#          prerelease: false
#
#  clean:
#    needs: deploy
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Set up GitHub CLI
#        uses: actions/setup-go@v4
#        with:
#          go-version: '1.21'
#
#      - name: Install GitHub CLI
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y gh
#
#      - name: Clean up old images
#        run: |
#          # Afficher les informations de débogage
#          echo "Repository: ${{ github.repository }}"
#          echo "Repository Owner: ${{ github.repository_owner }}"
#          echo "Repository Name: ${{ github.event.repository.name }}"
#
#          # Définir l'environnement en fonction de la branche
#          if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
#            ENV=staging
#          else
#            ENV=production
#          fi
#          echo "Environment: $ENV"
#
#          # Obtenir la liste des images existantes
#          IMAGES=$(gh api \
#            -H "Accept: application/vnd.github+json" \
#            -H "X-GitHub-Api-Version: 2022-11-28" \
#            "/users/${{ github.repository_owner }}/packages/container/${{ github.event.repository.name }}/versions" \
#            --jq ".[] | select(any(.metadata.container.tags[]; . == \"$ENV\")) | .id" | sort -r | tail -n +2)
#
#          # Afficher le nombre d'images trouvées
#          echo "Found $(echo "$IMAGES" | wc -l) images to clean up"
#
#          # Supprimer les anciennes images
#          for id in $IMAGES; do
#            echo "Deleting image ID: $id"
#            gh api --method DELETE \
#              -H "Accept: application/vnd.github+json" \
#              -H "X-GitHub-Api-Version: 2022-11-28" \
#              "/users/${{ github.repository_owner }}/packages/container/${{ github.event.repository.name }}/versions/$id" || true
#          done
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}